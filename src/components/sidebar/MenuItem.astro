---
import { Icon } from "astro-icon/components";

const { title, icon, href = "#", items = [] } = Astro.props;
const currentPath = Astro.url.pathname;
const segments = currentPath.split("/");
const selectedMenu = segments[1];
---

{
  items.length == 0 ? (
    <a
      href={href}
      class={`flex items-center space-x-2 focus:bg-cream hover:bg-cream cursor-pointer rounded px-2 py-3 ${title === "Notes" || title === "Photos" ? "cursor-not-allowed opacity-60 pointer-events-none" : ""}`}
    >
      <Icon name={icon} width={24} height={24} class="shrink-0" />
      <span class="text-darkgreen leading-4 grow font-medium">{title}</span>
      {(title === "Notes" || title === "Photos") && (
        <span>
          <div class="text-xs not-italic font-medium leading-4 text-darkgreen border border-sage pl-2 pr-2 rounded-2xl bg-cream-light border-2">
            Coming Soon
          </div>
        </span>
      )}
    </a>
  ) : (
    <div class="relative">
      <button
        class="flex items-center space-x-2 focus:bg-cream hover:bg-cream cursor-pointer rounded px-2 py-3 w-full"
        aria-expanded={selectedMenu == icon ? "true" : "false"}
        data-dropdown-target={`dropdown-${icon}`}
      >
        <Icon name={icon} width={24} height={24} class="shrink-0" />
        <span class="text-darkgreen text-left leading-4 grow font-medium">
          {title}
        </span>
        <Icon
          name="chevron"
          id="sidebar-chevron"
          width={24}
          height={24}
          class="shrink-0 transition-transform duration-300"
        />
      </button>
      <ul
        class={`${selectedMenu == icon ? "block" : "hidden"}`}
        id={`dropdown-${icon}`}
        role="listbox"
      >
        {items.map((item) => {
          const isActive =
            segments[2] === item.href.split("/")[2] &&
            segments[1] === item.href.split("/")[1];
          return (
            <li class={`py-2 pr-2 pl-10 ${isActive ? "underline" : ""}`}>
              <a
                href={item.href}
                class={`text-darkgreen text-sm leading-none font-medium block hover:underline hover:underline-offset-1 ${isActive ? "underline" : ""}`}
              >
                {item.title}
              </a>
            </li>
          );
        })}
      </ul>
    </div>
  )
}

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll("button[aria-expanded]");

    buttons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const button = event.currentTarget as HTMLButtonElement;
        const dropdownId = button.getAttribute("data-dropdown-target");
        const dropdown = document.getElementById(dropdownId);
        const isExpanded = button.getAttribute("aria-expanded") === "true";

        button.setAttribute("aria-expanded", (!isExpanded).toString());
        dropdown.classList.toggle("hidden", isExpanded);
        button
          .querySelector("#sidebar-chevron")
          .classList.toggle("rotate-180", !isExpanded);
      });
    });
  });
</script>
