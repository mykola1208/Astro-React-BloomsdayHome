---
import { Icon } from "astro-icon/components";
import Dialog from "./Dialog.astro";
import DocumentUploader from "./react/DocumentUploader";

interface Props {
  url: string;
}

const { url } = Astro.props;
const user = await Astro.locals.currentUser();
---

<bd-pdf-viewer data-url={url}>
  <div class="p-2">
    <div class="flex justify-center gap-14 p-4">
      <div class="basis-1/3">
        <p class="text-xl font-bold text-darkgreen" id="kind">Bank Statement</p>
        <p class="text-sm font-normal text-darkgreen">Uploaded on 2/19/24</p>
      </div>
      <div class="basis-1/3 flex justify-center items-center gap-2">
        <button type="button" class="prev">
          <Icon name="arrow-left" width={24} height={24} class="shrink-0" />
        </button>
        <span class="text-sm font-normal text-darkgreen"
          >Page: <span id="page_num"></span> / <span id="page_count"
          ></span></span
        >
        <button type="button" class="next">
          <Icon name="arrow-right" width={24} height={24} class="shrink-0" />
        </button>
      </div>
      <div class="basis-1/3 justify-end flex gap-3">
        <button type="button" class="zoom-in">
          <Icon name="zoom-in" width={24} height={24} class="shrink-0" />
        </button>
        <button type="button" class="zoom-out">
          <Icon name="zoom-out" width={24} height={24} class="shrink-0" />
        </button>
        <button type="button" class="expand">
          <Icon name="expand" width={24} height={24} class="shrink-0" />
        </button>
        <button type="button" class="download">
          <Icon name="download" width={24} height={24} class="shrink-0" />
        </button>
        <button type="button" class="upload">
          <Icon name="upload" width={24} height={24} class="shrink-0" />
        </button>
        <button type="button" class="trash">
          <Icon name="trash" width={24} height={24} class="shrink-0" />
        </button>
      </div>
    </div>
    <div class="flex justify-center">
      <canvas></canvas>
    </div>
  </div>
  <div id="replace-file">
    <Dialog
      id="replace-document-dialog"
      title="Replace Your Document"
      width="449px"
      height="593px"
      titleClass="text-3xl"
    >
      <div class="py-4">
        <DocumentUploader
          currentUser={user}
          mode="replace"
          client:only="react"
        />
      </div>
    </Dialog>
  </div>
</bd-pdf-viewer>

<script>
  import { getDocument } from "pdfjs-dist";
  import { kind } from "../store.js";
  import { confirmWrapper, confirm } from "./react/confirm";
  await import("pdfjs-dist/build/pdf.worker.min.mjs");

  kind.subscribe((content) => {
    document.getElementById("kind").textContent = content;
  });

  const replaceFileButton = document.querySelector(
    ".upload"
  ) as HTMLButtonElement;
  const replaceDocumentDialog = document.querySelector(
    "#replace-document-dialog"
  );
  replaceFileButton.addEventListener("click", () => {
    replaceDocumentDialog.setAttribute("open", "true");
  });

  const deleteFileButton = document.querySelector(
    ".trash"
  ) as HTMLButtonElement;

  deleteFileButton.addEventListener("click", async () => {
    await confirmWrapper(
      {
        title: "Are your sure?",
        description:
          "Are you sure you want to replace this item? This action cannot be undone.",
      },
      "Replace"
    );
  });

  class PdfViewer extends HTMLElement {
    _pdfDoc: any;
    _scale: number = 1;
    _canvas: HTMLCanvasElement;
    _page: number = 1;
    _rendering: boolean = false;
    _pagePending: number;

    constructor() {
      super();

      getDocument(this.dataset.url).promise.then((pdfDoc) => {
        // Initial/first page rendering
        this.querySelector("#page_count").textContent = `${pdfDoc.numPages}`;
        this.renderPage(pdfDoc, this._page);
        this.querySelector(".prev").addEventListener("click", () =>
          this.onPrevPage(pdfDoc)
        );
        this.querySelector(".next").addEventListener("click", () =>
          this.onNextPage(pdfDoc)
        );
        this.querySelector(".zoom-in").addEventListener("click", () => {
          this._scale += 0.1;
          this.renderPage(pdfDoc, this._page, this._scale);
        });
        this.querySelector(".zoom-out").addEventListener("click", () => {
          if (this._scale > 0.6) this._scale -= 0.1;
          this.renderPage(pdfDoc, this._page, this._scale);
        });
        this.querySelector(".download").addEventListener("click", () => {
          this.downloadPdf();
        });
        this.querySelector(".expand").addEventListener("click", () => {
          this.toggleFullscreen();
        });
      });

      this._canvas = this.querySelector("canvas");
    }

    renderPage(pdfDoc, num, scale = 1) {
      pdfDoc.getPage(num).then((page) => {
        const viewport = page.getViewport({ scale: scale });
        this._canvas.height = viewport.height;
        this._canvas.width = viewport.width;

        // Render PDF page into canvas context
        const renderContext = {
          canvasContext: this._canvas.getContext("2d"),
          viewport: viewport,
        };

        this._rendering = true;
        page.render(renderContext).promise.then(() => {
          this._rendering = false;
        });
      });

      // Update page counters
      document.getElementById("page_num").textContent = num;
    }

    queueRenderPage(pdfDoc, page) {
      if (this._rendering) {
        this._pagePending = page;
      } else {
        this.renderPage(pdfDoc, page);
      }
    }

    onPrevPage(pdfDoc) {
      if (this._page <= 1) {
        return;
      }
      this._page--;
      this.queueRenderPage(pdfDoc, this._page);
    }

    onNextPage(pdfDoc) {
      if (this._page >= pdfDoc.numPages) {
        return;
      }
      this._page++;
      this.queueRenderPage(pdfDoc, this._page);
    }

    downloadPdf() {
      const url = this.dataset.url;
      const link = document.createElement("a");
      link.href = url;
      link.download = "document.pdf";
      link.click();
    }

    toggleFullscreen() {
      if (!document.fullscreenElement) {
        this.requestFullscreen().catch((err) => {
          throw new Error(
            `Error attempting to enable full-screen mode: ${err.message} (${err.name})`
          );
        });
      } else {
        document.exitFullscreen();
      }
    }
  }
  customElements.define("bd-pdf-viewer", PdfViewer);
</script>
