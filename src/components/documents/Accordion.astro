---
import { Icon } from "astro-icon/components";
import { taskCategories } from "../../data/data";

interface AccordionMenuItem {
  title: string;
  document: any;
}

interface AccordionItem {
  title: string;
  items: AccordionMenuItem[];
  isExpanded?: boolean;
}

interface Props {
  id: string;
  accordionItems: AccordionItem[];
}

let index = 0;
const { id, accordionItems = [] } = Astro.props;
const user = await Astro.locals.currentUser();
---

<style>
  .active {
    text-decoration: underline;
    text-decoration-thickness: 2px;
  }
</style>

<bd-accordion>
  <div
    class="accordion border-x border-b border-sage rounded-lg"
    role="presentation"
    id="document-accordion"
  >
    {
      accordionItems.map(({ title, items, isExpanded = false }, itemIndex) => {
        const randomId = Math.floor(Math.random() * 9999);
        return (
          <div
            class={`accordion-item group bg-cream-light border-t border-sage ${itemIndex == 0 && "rounded-t-lg"} ${itemIndex == accordionItems.length - 1 && "rounded-b-lg"}`}
            data-id={`accordion-item-${itemIndex}`}
          >
            <button
              class={`flex items-center space-x-2 focus:bg-cream cursor-pointer px-2 py-3 w-full ${itemIndex == 0 && "rounded-t-lg"} ${itemIndex == accordionItems.length - 1 && "rounded-b-lg"}`}
              aria-controls={`accordion${randomId}`}
              aria-expanded={isExpanded ? "true" : "false"}
            >
              <span class="text-darkgreen text-left text-lg leading-4 grow font-medium">
                <span>{taskCategories[title]?.header}</span>
              </span>
              <Icon
                name="chevron"
                width={24}
                height={24}
                class="shrink-0 group-open:rotate-180"
              />
            </button>
            <div id={`accordion${randomId}`} hidden={!isExpanded}>
              <ul>
                {items?.map((item) => (
                  <li
                    class={`py-3 pl-8 bg-white border-t border-sage hover:underline hover:underline-offset-2 cursor-pointer  ${item.document == undefined ? "text-sage " : "text-darkgreen"}`}
                    id={`item-${index++}`}
                    data-id={`item-${index - 1}`}
                  >
                    <a
                      href={`/documents/${id}/${item.document ? encodeURIComponent(item.document.filename) : "new"}`}
                    >
                      {item.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        );
      })
    }
  </div>
</bd-accordion>

<script>
  import { kind } from "../../store";

  const accordion = document.getElementById("document-accordion");
  const buttons = accordion.querySelectorAll("button");
  const lis = accordion.querySelectorAll("li");

  buttons[0].classList.add("rounded-t-lg");
  lis[lis.length - 1].classList.add("rounded-b-lg");

  // Function to remove active class from all li elements
  function removeActiveClass() {
    lis.forEach((li) => {
      li.classList.remove("active");
    });
  }

  // Function to save the active item state
  function saveActiveItemState(itemId) {
    localStorage.setItem("activeAccordionItem", itemId);
  }

  // Function to save the accordion state
  function saveAccordionState(itemIndex) {
    localStorage.setItem(
      "expandedAccordionItem",
      `accordion-item-${itemIndex}`
    );
  }

  lis.forEach((li, index) => {
    li.addEventListener("click", () => {
      // Set the clicked li as active
      removeActiveClass();
      li.classList.add("active");

      const content = document.getElementById(`item-${index}`).textContent;
      kind.set(content);
      localStorage.setItem("activeAccordionContent", content);

      // Save the selected item to local storage
      saveActiveItemState(`item-${index}`);
    });
  });

  buttons.forEach((button, itemIndex) => {
    button.addEventListener("click", () => {
      saveAccordionState(itemIndex);
    });
  });

  // Retrieve the expanded accordion state from local storage
  const expandedItemId = localStorage.getItem("expandedAccordionItem");
  if (expandedItemId) {
    const expandedItem = document.querySelector(
      `[data-id="${expandedItemId}"]`
    );
    if (expandedItem) {
      const button = expandedItem.querySelector("button[aria-expanded]");
      const body = document.querySelector(
        `#${button.getAttribute("aria-controls")}`
      );
      button.setAttribute("aria-expanded", "true");
      body.removeAttribute("hidden");
    }
  }

  // Select the li element based on the activeAccordionContent value
  const activeAccordionContent = localStorage.getItem("activeAccordionContent");
  if (activeAccordionContent) {
    lis.forEach((li) => {
      if (li.textContent.trim() === activeAccordionContent.trim()) {
        li.classList.add("active");
        // Ensure the parent accordion item is expanded
        const parentAccordionItem = li.closest(".accordion-item");
        const parentButton = parentAccordionItem.querySelector("button[aria-expanded]");
        const parentBody = document.querySelector(`#${parentButton.getAttribute("aria-controls")}`);
        parentButton.setAttribute("aria-expanded", "true");
        parentBody.removeAttribute("hidden");
      }
    });
  }

  class Accordion extends HTMLElement {
    constructor() {
      super();

      const headers = this.querySelectorAll(
        "button[aria-expanded]"
      ) as NodeListOf<HTMLButtonElement>;

      if (headers && headers.length) {
        headers.forEach((header: HTMLButtonElement, index: number) => {
          const body = this.querySelector(
            `#${header.getAttribute("aria-controls")}`
          ) as HTMLElement;
          const isInitiallyExpanded =
            header.getAttribute("aria-expanded") === "true";

          header.addEventListener("click", (e: MouseEvent) => {
            this.onButtonClick(header, body);
            e.stopPropagation();
          });

          if (isInitiallyExpanded || index == 0) {
            this.open(header, body);
          }
        });
      }
    }

    onButtonClick(header: HTMLButtonElement, body: HTMLElement) {
      const open = header.getAttribute("aria-expanded") === "true";

      if (open) {
        return this.close(header, body);
      }

      return this.open(header, body);
    }

    toggle(open: boolean, header: HTMLButtonElement, body: HTMLElement) {
      header.setAttribute("aria-expanded", `${open}`);
      const accordionItem: HTMLElement = body.closest(".accordion-item");

      if (open) {
        // close already open accordion item
        const accordion: HTMLElement = body.closest(".accordion");
        const openAccordionItem = accordion.querySelector(
          ".accordion-item[open]"
        );

        if (openAccordionItem) {
          const openHeader: HTMLButtonElement = openAccordionItem.querySelector(
            "button[aria-expanded]"
          );
          const openBody: HTMLElement = this.querySelector(
            `#${openHeader.getAttribute("aria-controls")}`
          );
          this.close(openHeader, openBody);
        }

        accordionItem.setAttribute("open", "");
        body.removeAttribute("hidden");
      } else {
        accordionItem.removeAttribute("open");
        body.setAttribute("hidden", "");
      }
    }

    open(header: HTMLButtonElement, body: HTMLElement) {
      this.toggle(true, header, body);
    }

    close(header: HTMLButtonElement, body: HTMLElement) {
      this.toggle(false, header, body);
    }
  }
  customElements.define("bd-accordion", Accordion);
</script>
