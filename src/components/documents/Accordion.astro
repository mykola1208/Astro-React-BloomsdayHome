---
import { Icon } from "astro-icon/components";
import { taskCategories } from "../../data/data";

interface AccordionMenuItem {
  title: string;
}

interface AccordionItem {
  title: string;
  items: AccordionMenuItem[];
  isExpanded?: boolean;
}

interface Props {
  accordionItems: AccordionItem[];
}

const { accordionItems = [] } = Astro.props;
let index = 0;
---

<bd-accordion>
  <div
    class="accordion border-x border-b border-sage rounded-lg"
    role="presentation"
    id="document-accordion"
  >
    {
      accordionItems.map(({ title, items, isExpanded = false }, itemIndex) => {
        const randomId = Math.floor(Math.random() * 9999);
        return (
          <div
            class={`accordion-item group bg-cream-light border-t border-sage ${itemIndex == 0 && "rounded-t-lg"} ${itemIndex == accordionItems.length - 1 && "rounded-b-lg"}`}
          >
            <button
              class={`flex items-center space-x-2 focus:bg-cream cursor-pointer px-2 py-3 w-full ${itemIndex == 0 && "rounded-t-lg"} ${itemIndex == accordionItems.length - 1 && "rounded-b-lg"}`}
              aria-controls={`accordion${randomId}`}
              aria-expanded={isExpanded ? "true" : "false"}
            >
              <span class="text-darkgreen text-left text-lg leading-4 grow font-medium">
                <span>{taskCategories[title].header}</span>
              </span>
              <Icon
                name="chevron"
                width={24}
                height={24}
                class="shrink-0 group-open:rotate-180"
              />
            </button>
            <div id={`accordion${randomId}`} hidden={!isExpanded}>
              <ul>
                {items.map((item) => (
                  <li
                    class="py-3 pl-8 bg-white border-t border-sage text-darkgreen hover:underline hover:underline-offset-2 cursor-pointer"
                    id={`item-${index++}`}
                  >
                    {item.title}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        );
      })
    }
  </div>
</bd-accordion>
<script>
  import { kind } from "../../store.js";

  const accordion = document.getElementById("document-accordion");
  const buttons = accordion.querySelectorAll("button");
  buttons[0].classList.add("rounded-t-lg");
  const lis = accordion.querySelectorAll("li");
  lis[lis.length - 1].classList.add("rounded-b-lg");
  lis.forEach((li, index) => {
    li.addEventListener("click", () => {
      const content = document.getElementById(`item-${index}`).textContent;
      kind.set(content);
    });
  });
  class Accordion extends HTMLElement {
    constructor() {
      super();

      const headers = this.querySelectorAll(
        "button[aria-expanded]"
      ) as NodeListOf<HTMLButtonElement>;

      if (headers && headers.length) {
        headers.forEach((header: HTMLButtonElement, index: number) => {
          const body = this.querySelector(
            `#${header.getAttribute("aria-controls")}`
          ) as HTMLElement;
          const isInitiallyExpanded =
            header.getAttribute("aria-expanded") === "true";

          header.addEventListener("click", (e: MouseEvent) => {
            this.onButtonClick(header, body);
            e.stopPropagation();
          });

          if (isInitiallyExpanded || index == 0) {
            this.open(header, body);
          }
        });
      }
    }

    onButtonClick(header: HTMLButtonElement, body: HTMLElement) {
      const open = header.getAttribute("aria-expanded") === "true";

      if (open) {
        return this.close(header, body);
      }

      return this.open(header, body);
    }

    toggle(open: boolean, header: HTMLButtonElement, body: HTMLElement) {
      header.setAttribute("aria-expanded", `${open}`);
      const accordionItem: HTMLElement = body.closest(".accordion-item");

      if (open) {
        // close already open accordion item
        const accordion: HTMLElement = body.closest(".accordion");
        const openAccordionItem = accordion.querySelector(
          ".accordion-item[open]"
        );

        if (openAccordionItem) {
          const openHeader: HTMLButtonElement = openAccordionItem.querySelector(
            "button[aria-expanded]"
          );
          const openBody: HTMLElement = this.querySelector(
            `#${openHeader.getAttribute("aria-controls")}`
          );
          this.close(openHeader, openBody);
        }

        accordionItem.setAttribute("open", "");
        body.removeAttribute("hidden");
      } else {
        accordionItem.removeAttribute("open");
        body.setAttribute("hidden", "");
      }
    }

    open(header: HTMLButtonElement, body: HTMLElement) {
      this.toggle(true, header, body);
    }

    close(header: HTMLButtonElement, body: HTMLElement) {
      this.toggle(false, header, body);
    }
  }
  customElements.define("bd-accordion", Accordion);
</script>
